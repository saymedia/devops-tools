#!/usr/bin/perl

use strict;
use warnings;

use IO::Socket::INET;

my $listener = IO::Socket::INET->new(
    LocalPort => 2103,
    Listen => 1024,
);

while (1) {
    local $!;
    my $client = $listener->accept;

    unless ($client) {
        warn "Failed to accept new client: $!\n";
        sleep 10;
        next;
    }

    my $pid = fork();
    next if $pid; # Parent gets the child PID, so go accept another sock

    warn "Unable to fork, running single-process: $!"
        unless defined $pid;

    print STDERR "Opening socket to server\n";
    my $server = IO::Socket::INET->new(
        PeerAddr => '127.0.0.1:2003',
    );
    print STDERR "Done opening socket to server\n";

    unless ($server) {
        warn "Couldn't open connection to server: $!\n";
        $client->close;
        sleep 10;
        next;
    }

    while (my $input = <$client>) {
        $input =~ s/^(oak-(\w+-\w+?)\d+\w+)/$2.$1/;
        $server->write($input);
    }

    if (defined $pid) { # We're in a child process
        exit;
        last;
    }
}
